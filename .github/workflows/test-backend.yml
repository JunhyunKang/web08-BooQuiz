name: backend test

on:
  pull_request:
    branches: [develop, main]
    paths:
        - apps/backend/**

jobs:
  test:
    runs-on: ubuntu-latest
    name: Set up Node environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'node'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install root dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build backend
        working-directory: apps/backend
        run: pnpm run build

      - name: Run tests for backend
        working-directory: apps/backend
        run: pnpm test

  push-docker:
    needs: test
    runs-on: ubuntu-latest
    name: push-docker
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/booquiz-backend:${{secrets.DOCKER_TAG}}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/booquiz-backend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/booquiz-backend:cache,mode=max
          build-args: |
            NODE_ENV=${{secrets.NODE_ENV}}
            SESSION_SECRET=${{secrets.SESSION_SECRET}}


  deploy-backend:
    needs: push-docker
    runs-on: ubuntu-latest
    name: Deploy Backend
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
    steps:
      - name: Set up SSH agent and add SSH key
        run: |
          eval "$(ssh-agent -s)"
          echo "SSH_AGENT_PID=$SSH_AGENT_PID" >> $GITHUB_ENV
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          
          # SSH 프라이빗 키 추가
          echo "${{ secrets.PUBLIC_SSH_PRIVATE_KEY }}" > public_server_key.pem
          chmod 600 public_server_key.pem
          ssh-add public_server_key.pem
          
          # 프라이빗 서버 키 추가
          echo "${{ secrets.PRIVATE_SSH_PRIVATE_KEY }}" > private_server_key.pem
          chmod 600 private_server_key.pem
          ssh-add private_server_key.pem
        shell: bash
      - name: Access To Public Server and Deploy to Private Server
        run: |
          DEPLOY_USER=${{ secrets.DEPLOY_USER }}              # 유저 이름
          PUBLIC_SERVER_IP=${{ secrets.PUBLIC_SERVER_IP }}     # 퍼블릭 서버 IP
          PRIVATE_SERVER_IP=${{ secrets.PRIVATE_SERVER_IP }}   # 프라이빗 서버 IP
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          
          # 퍼블릭 서버의 호스트 키를 known_hosts에 추가
          mkdir -p ~/.ssh
          ssh-keyscan -H $PUBLIC_SERVER_IP >> ~/.ssh/known_hosts
          
          # SSH 에이전트 포워딩을 사용하여 퍼블릭 서버에 접속하여 프라이빗 서버에 배포
          ssh -i public_server_key.pem -A $DEPLOY_USER@$PUBLIC_SERVER_IP << EOF
              # 프라이빗 서버의 호스트 키를 퍼블릭 서버의 known_hosts에 추가
              mkdir -p ~/.ssh
              ssh-keyscan -H $PRIVATE_SERVER_IP >> ~/.ssh/known_hosts
          
              # 프라이빗 서버에서 Docker Hub 로그인 및 이미지 배포
              ssh $DEPLOY_USER@$PRIVATE_SERVER_IP "sudo docker pull $DOCKER_USERNAME/booquiz-backend:${{secrets.DOCKER_TAG}} && \
                  sudo docker stop booquiz-backend || true && \
                  sudo docker rm booquiz-backend || true && \
                  sudo docker run -d --name booquiz-backend -p 3000:3000 $DOCKER_USERNAME/booquiz-backend:${{secrets.DOCKER_TAG}} && \
                  sudo docker image prune -f"
          EOF
          exit
        shell: bash
